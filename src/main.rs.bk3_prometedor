use std::sync::{Arc, Mutex};
use std::thread;
use reqwest;

fn main() {
    // Crear un valor compartido para almacenar la respuesta de la API
    let shared_response = Arc::new(Mutex::new(String::new()));

    // Clonar el valor compartido para cada proceso
    let shared_response_clone1 = Arc::clone(&shared_response);
    let shared_response_clone2 = Arc::clone(&shared_response);

    // Realizar la solicitud HTTP en el programa principal
    let response = reqwest::blocking::get("https://catfact.ninja/breeds")
        .expect("Error al llamar a la API")
        .text()
        .expect("Error al obtener el cuerpo de la respuesta");

    // Almacenar la respuesta en la variable compartida
    {
        let mut shared_response = shared_response.lock().unwrap();
        *shared_response = response;
    }

    // Crear el primer proceso
    let thread1 = thread::spawn(move || {
        let shared_response = shared_response_clone1.lock().unwrap();
        println!("Proceso 1: Respuesta de la API = {}", *shared_response);
    });

    // Crear el segundo proceso
    let thread2 = thread::spawn(move || {
        let shared_response = shared_response_clone2.lock().unwrap();
        println!("Proceso 2: Respuesta de la API = {}", *shared_response);
    });

    // Esperar a que ambos procesos terminen
    thread1.join().unwrap();
    thread2.join().unwrap();
}
